    /////////////////////////////Servermanagement////////////////////////////////////////

    const taskFuncServermanagement: TaskFuncServermanagement = {
      taskCreateServermanagement: (title, content) => {
        setTask((prev) => {
          let id = 1;
          const latestTask = prev.storedtasks_servermanagement.at(-1);
          if (latestTask) {
            id = latestTask.id + 1;
          }
          const newTask: storedtask_servermanagement = {
            id,
            title,
            content,
            check: false,
          };
          return { ...prev, storedtasks_servermanagement: [...prev.storedtasks_servermanagement, newTask] };
        });
      },
      taskCompleteServermanagement: (id, isCompleteServermanagement) => {
        setTask((prev) => {
          const updated = prev.storedtasks_servermanagement.map((task) =>
            task.id === id ? { ...task, check: isCompleteServermanagement} : task
          );
          return { ...prev, storedtasks_servermanagement: updated };
        });
      },
      deleteAllServermanagement: () => {
        setTask((prev) => ({ ...prev, storedtasks_servermanagement: [] }));
        window.location.reload();
      },
      taskWriteServermanagement: () => {
        const localStorageTask = JSON.stringify(task.storedtasks_servermanagement);
        localStorage.setItem("localStorageTask", localStorageTask);
      },
      taskReadServermanagement: () => {
        setlocalTasklist((prev) => {
          let id = 1;
          const latestTask = prev.localstoragetasks.at(-1);
          if (latestTask) {
            id = latestTask.id + 1;
          }
          const getLocalstorage = localStorage.getItem("localStorageTask");
          if (getLocalstorage) {
            const jsonTasklist = JSON.parse(getLocalstorage);
            console.log(jsonTasklist);
            for (let j of jsonTasklist) {
              console.log(j.id);
              console.log(j.title);
              console.log(j.content);
              console.log(j.check);
              setTitle(j.title);
              setContent(j.content);
            }
            // console.log(jsonTasklist.map((title) => {title.title}));
          }
          const copyTask: localstoragetask = {
            id,
            title: title,
            content: content,
            check: false,
          };
          return {
            ...prev,
            localstoragetasks: [...prev.localstoragetasks, copyTask],
          };
        });
      },
      loadLocalServermanagement: () => {
        setlocalTasklist((prev) => {
          const getLocalstorage = localStorage.getItem("localStorageTask");
          if (getLocalstorage) {
            const jsonparselist = JSON.parse(getLocalstorage);
            for (let k of jsonparselist) {
              prev.localstoragetasks.push({
                id: k.id,
                content: k.content,
                title: k.title,
                check: k.check,
                detailCheck: k.detailCheck,
              } as localstoragetask);
            }
          };
          return {
            ...prev,
            localstoragetasks: [...prev.localstoragetasks],
          };
        });
      },
      selectPageServermanagement: ()=>{
        setTopic((prev)=>{
          console.log(topic);
          const url = window.location;
          if(prev.selectTopic!==""){
          window.location.replace({url}+"/"+prev.selectTopic);
          }
          return {
            ...prev, selectTopic : "Servermanagement",
          };
        });
      },
    };
  

    /////////////////////////////////////////////////////////////////////
